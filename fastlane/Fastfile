default_platform(:ios)

iosPlistPath = "./iosApp/iosApp/Resources/Info.plist"
iosProdProvisionsNames = ["shkabaj_appstore", "shkabaj_push_ext_appstore", "NewsWidget_appstore", "shkabaj_extension_appstore"]
iosProdCertsNames = ["shkabaj_prod", "push_prod"]

platform :ios do

    desc "Uploads iOS Appstore build"
    lane :ios_release do
        prepare_signing(provisioningProfileNames: iosProdProvisionsNames, certificatesNames: iosProdCertsNames)
        ipa_file_path = build(
            scheme: "shkabaj-kmm-ios",
            config: "Release",
            plist_path: iosPlistPath,
            exportMethod: "app-store"
        )
        upload_to_testflight(skip_waiting_for_build_processing: true)
    end

    private_lane :prepare_signing do |options|
      options[:certificatesNames].each { |certificateName|
        import_certificate(
          keychain_name: "login",
          keychain_password: '',
          certificate_path: "./iosApp/Certificates/#{certificateName}.p12",
          log_output: true
        )
      }
      options[:provisioningProfileNames].each { |provisioningProfileName|
        install_provisioning_profile(path: "./iosApp/Certificates/#{provisioningProfileName}.mobileprovision")
        puts provisioningProfileName
      }
    end

    desc "Build app and return path to IPA file"
    private_lane :build do |options|
        xcversion(version: "16.1")
        date = Time.new.strftime("_%d_%m_%Y")
        output_filename = "iOSApp" + date + ".ipa"

        build_number = git_build_number().to_s
        set_info_plist_value(path: options[:plist_path], key: "CFBundleVersion", value: build_number)

        ipa_file_path = gym(
            workspace: "./iosApp/shkabaj-kmm-ios.xcworkspace",
            scheme: options[:scheme],
            configuration: options[:config],
            clean: true,
            output_directory: "./iosApp/build",
            output_name: output_filename,
            include_symbols: true,
            export_method: options[:exportMethod]
        )

        reset_git_repo(force: true, files: [options[:plist_path]])
        ipa_file_path #return path
    end

end

platform :android do

    desc "Build release apk"
    lane :android_release do
        # TODO: implement upload to google play
    end

end

private_lane :git_build_number do
    build_number = sh("GIT_REVISION=`git describe --match 'initial' | awk '{split($0,a,\"-\"); print a[2]}'`; echo ${GIT_REVISION}; exit 0")
    build_number = build_number.strip
end

#before, after, error
before_all do |lane|
  clean_build_artifacts
  skip_docs
end

after_all do |lane|
  puts("Successfully finished (#{lane})!")
end

error do |lane, exception|
  clean_build_artifacts
  puts("Failed (#{lane}) (#{exception.message})!")
end
